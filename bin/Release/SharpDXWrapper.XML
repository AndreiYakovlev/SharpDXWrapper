<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpDXWrapper</name>
    </assembly>
    <members>
        <member name="T:SharpDXWrapper.IProjectionCamera">
            <summary>
            Defines a method that allows you to obtain a projection matrix.
            </summary>
        </member>
        <member name="P:SharpDXWrapper.IProjectionCamera.Projection">
            <summary>
            Gets the projection matrix.
            </summary>
            <value>The projection.</value>
        </member>
        <member name="T:SharpDXWrapper.Camera">
            <summary>
            Create a camera for obtaining view matrix.
            </summary>
        </member>
        <member name="M:SharpDXWrapper.Camera.Rotate(System.Single,System.Single,System.Single)">
            <summary>
            Rotates the specified angle.
            </summary>
            <param name="yawAngle">The yaw angle.</param>
            <param name="pitchAngle">The pitch angle.</param>
            <param name="rollAngle">The roll angle.</param>
        </member>
        <member name="M:SharpDXWrapper.Camera.Move(SharpDX.Vector3)">
            <summary>
            Moves the specified direction.
            </summary>
            <param name="direction">The direction.</param>
        </member>
        <member name="P:SharpDXWrapper.Camera.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:SharpDXWrapper.Camera.Target">
            <summary>
            Gets or sets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:SharpDXWrapper.Camera.View">
            <summary>
            Gets the view matrix.
            </summary>
            <value>The view.</value>
        </member>
        <member name="P:SharpDXWrapper.Camera.Rotation">
            <summary>
            Gets or sets the rotation.
            </summary>
            <value>The rotation.</value>
        </member>
        <member name="P:SharpDXWrapper.Camera.Length">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="T:SharpDXWrapper.FirstPersonCamera">
            <summary>
            Class FirstPersonCamera. Create a first person camera for obtaining view matrix.
            </summary>
            <seealso cref="T:SharpDXWrapper.Camera"/>
        </member>
        <member name="M:SharpDXWrapper.FirstPersonCamera.#ctor(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDXWrapper.FirstPersonCamera"/> class.
            </summary>
            <param name="position">The position.</param>
            <param name="target">The target.</param>
        </member>
        <member name="F:SharpDXWrapper.FirstPersonCamera.length">
            <summary>
            The length
            </summary>
        </member>
        <member name="F:SharpDXWrapper.FirstPersonCamera.rotation">
            <summary>
            The rotation
            </summary>
        </member>
        <member name="M:SharpDXWrapper.FirstPersonCamera.Rotate(System.Single,System.Single,System.Single)">
            <summary>
            Rotates the specified yaw angle.
            </summary>
            <param name="yawAngle">The yaw angle.</param>
            <param name="pitchAngle">The pitch angle.</param>
            <param name="rollAngle">The roll angle.</param>
        </member>
        <member name="P:SharpDXWrapper.FirstPersonCamera.Length">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:SharpDXWrapper.FirstPersonCamera.Rotation">
            <summary>
            Gets or sets the rotation.
            </summary>
            <value>The rotation.</value>
        </member>
        <member name="T:SharpDXWrapper.ThirdPersonCamera">
            <summary>
            Class ThirdPersonCamera. Create a third person camera for obtaining view matrix.
            </summary>
            <seealso cref="T:SharpDXWrapper.Camera"/>
        </member>
        <member name="F:SharpDXWrapper.ThirdPersonCamera.length">
            <summary>
            The length
            </summary>
        </member>
        <member name="F:SharpDXWrapper.ThirdPersonCamera.rotation">
            <summary>
            The rotation
            </summary>
        </member>
        <member name="M:SharpDXWrapper.ThirdPersonCamera.#ctor(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDXWrapper.ThirdPersonCamera"/> class.
            </summary>
            <param name="position">The position.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:SharpDXWrapper.ThirdPersonCamera.Rotate(System.Single,System.Single,System.Single)">
            <summary>
            Rotates the specified yaw angle.
            </summary>
            <param name="yawAngle">The yaw angle.</param>
            <param name="pitchAngle">The pitch angle.</param>
            <param name="rollAngle">The roll angle.</param>
        </member>
        <member name="P:SharpDXWrapper.ThirdPersonCamera.Length">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:SharpDXWrapper.ThirdPersonCamera.Rotation">
            <summary>
            Gets or sets the rotation.
            </summary>
            <value>The rotation.</value>
        </member>
        <member name="T:SharpDXWrapper.PerspectiveCamera">
            <summary>
            Create a perspective camera for obtaining projection matrix.
            </summary>
            <seealso cref="T:SharpDXWrapper.IProjectionCamera"/>
        </member>
        <member name="M:SharpDXWrapper.PerspectiveCamera.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDXWrapper.PerspectiveCamera"/> class.
            </summary>
            <param name="fov">The fov.</param>
            <param name="nearZ">The near z.</param>
            <param name="farZ">The far z.</param>
            <param name="aspectRation">The aspect ration.</param>
        </member>
        <member name="P:SharpDXWrapper.PerspectiveCamera.FOV">
            <summary>
            Gets or sets the fov.
            </summary>
            <value>The fov.</value>
        </member>
        <member name="P:SharpDXWrapper.PerspectiveCamera.NearZ">
            <summary>
            Gets or sets the near z.
            </summary>
            <value>The near z.</value>
        </member>
        <member name="P:SharpDXWrapper.PerspectiveCamera.FarZ">
            <summary>
            Gets or sets the far z.
            </summary>
            <value>The far z.</value>
        </member>
        <member name="P:SharpDXWrapper.PerspectiveCamera.AspectRatio">
            <summary>
            Gets or sets the aspect ratio.
            </summary>
            <value>The aspect ratio.</value>
        </member>
        <member name="P:SharpDXWrapper.PerspectiveCamera.Projection">
            <summary>
            Gets the projection.
            </summary>
            <value>The projection.</value>
        </member>
        <member name="T:SharpDXWrapper.OrthogonalCamera">
            <summary>
            Create a orthogonal camera for obtaining projection matrix.
            </summary>
            <seealso cref="T:SharpDXWrapper.IProjectionCamera"/>
        </member>
        <member name="M:SharpDXWrapper.OrthogonalCamera.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDXWrapper.OrthogonalCamera"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="nearZ">The near z.</param>
            <param name="farZ">The far z.</param>
        </member>
        <member name="P:SharpDXWrapper.OrthogonalCamera.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:SharpDXWrapper.OrthogonalCamera.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:SharpDXWrapper.OrthogonalCamera.NearZ">
            <summary>
            Gets or sets the near z.
            </summary>
            <value>The near z.</value>
        </member>
        <member name="P:SharpDXWrapper.OrthogonalCamera.FarZ">
            <summary>
            Gets or sets the far z.
            </summary>
            <value>The far z.</value>
        </member>
        <member name="P:SharpDXWrapper.OrthogonalCamera.Projection">
            <summary>
            Gets the projection.
            </summary>
            <value>The projection.</value>
        </member>
        <member name="T:SharpDXWrapper.MathHelper">
            <summary>
            Provides helper methods.
            </summary>
        </member>
        <member name="M:SharpDXWrapper.MathHelper.Vector3FromYawPitch(System.Single,System.Single)">
            <summary>
            Gets vector from yaw and pitch angles
            </summary>
            <param name="yaw">The yaw angle.</param>
            <param name="pitch">The pitch angle.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:SharpDXWrapper.MathHelper.YawPitchRoll(SharpDX.Vector3)">
            <summary>
             Gets yaws, pitch and roll angles from vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:SharpDXWrapper.MathHelper.YawPitchRollFromVector3(SharpDX.Vector3)">
            <summary>
            Gets yaws, pitch and roll angles from vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:SharpDXWrapper.MathHelper.NormalFromTriangle(SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Compute normal from triangle.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <param name="c">The c.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="T:SharpDXWrapper.Shader">
            <summary>
            Create vertex and pixel shader from loaded shader file
            </summary>
            <seealso cref="T:System.IDisposable"/>
            <seealso cref="T:SharpDXWrapper.IApply`1"/>
        </member>
        <member name="T:SharpDXWrapper.IApply`1">
            <summary>
            Defines generic method for applying resources.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SharpDXWrapper.IApply`1.Apply(`0)">
            <summary>
            Applies resources.
            </summary>
            <param name="t">Context to which to apply resources. Example DeviceContext</param>
        </member>
        <member name="M:SharpDXWrapper.Shader.#ctor(SharpDX.Direct3D11.Device,System.String,System.String,System.String,SharpDX.Direct3D11.InputElement[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDXWrapper.Shader"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="fileName">Name of the file.</param>
            <param name="vertexShaderEntryPoint">The vertex shader entry point.</param>
            <param name="pixelShaderEntryPoint">The pixel shader entry point.</param>
            <param name="elements">The elements.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:SharpDX.CompilationException">
            </exception>
        </member>
        <member name="M:SharpDXWrapper.Shader.Apply(SharpDX.Direct3D11.DeviceContext)">
            <summary>
            Apply resources to device context.
            </summary>
            <param name="deviceContext">The device context.</param>
        </member>
        <member name="M:SharpDXWrapper.Shader.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:SharpDXWrapper.Shader"/> class.
            </summary>
        </member>
        <member name="M:SharpDXWrapper.Shader.Dispose">
            <summary>
            Performs application-defined tasks related to the release or reset of unmanaged resources.
            </summary>
        </member>
        <member name="M:SharpDXWrapper.Shader.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:SharpDXWrapper.Shader.VertexShader">
            <summary>
            Gets or sets the vertex shader.
            </summary>
            <value>The vertex shader.</value>
        </member>
        <member name="P:SharpDXWrapper.Shader.PixelShader">
            <summary>
            Gets or sets the pixel shader.
            </summary>
            <value>The pixel shader.</value>
        </member>
        <member name="P:SharpDXWrapper.Shader.InputLayout">
            <summary>
            Gets or sets the input layout.
            </summary>
            <value>The input layout.</value>
        </member>
        <member name="P:SharpDXWrapper.Shader.InputSignature">
            <summary>
            Gets or sets the input signature.
            </summary>
            <value>The input signature.</value>
        </member>
        <member name="P:SharpDXWrapper.Shader.Device">
            <summary>
            Gets or sets the D3D11Device.
            </summary>
            <value>The device.</value>
        </member>
        <member name="T:SharpDXWrapper.DirectXVertex">
            <summary>
            Struct DirectXVertex
            </summary>
        </member>
        <member name="F:SharpDXWrapper.DirectXVertex.Position">
            <summary>
            The position
            </summary>
        </member>
        <member name="F:SharpDXWrapper.DirectXVertex.Normal">
            <summary>
            The normal
            </summary>
        </member>
        <member name="F:SharpDXWrapper.DirectXVertex.Color">
            <summary>
            The color
            </summary>
        </member>
        <member name="F:SharpDXWrapper.DirectXVertex.UV">
            <summary>
            The uv
            </summary>
        </member>
        <member name="T:SharpDXWrapper.Shape">
            <summary>
            Class Shape.
            </summary>
            <seealso cref="T:System.IDisposable"/>
            <seealso cref="T:SharpDXWrapper.IApply`1"/>
            <seealso cref="T:SharpDXWrapper.IDraw`1"/>
        </member>
        <member name="T:SharpDXWrapper.IDraw`1">
            <summary>
            Defines generic method for drawing resources.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SharpDXWrapper.IDraw`1.Draw(`0)">
            <summary>
            Draws resources.
            </summary>
            <param name="t">Context to which to draw resources. Example DeviceContext</param>
        </member>
        <member name="F:SharpDXWrapper.Shape.InputElements">
            <summary>
            The input elements
            </summary>
        </member>
        <member name="F:SharpDXWrapper.Shape.VertexBuffer">
            <summary>
            The vertex buffer
            </summary>
        </member>
        <member name="F:SharpDXWrapper.Shape.VertexBufferBinding">
            <summary>
            The vertex buffer binding
            </summary>
        </member>
        <member name="F:SharpDXWrapper.Shape.Device">
            <summary>
            The device
            </summary>
        </member>
        <member name="M:SharpDXWrapper.Shape.#ctor(SharpDX.Direct3D11.Device,SharpDXWrapper.DirectXVertex[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDXWrapper.Shape"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="vertices">The vertices.</param>
            <exception cref="T:System.ArgumentNullException">device</exception>
            <exception cref="T:System.ArgumentNullException">device</exception>
        </member>
        <member name="M:SharpDXWrapper.Shape.Dispose">
            <summary>
            Выполняет определяемые приложением задачи, связанные с высвобождением или сбросом неуправляемых ресурсов.
            </summary>
        </member>
        <member name="M:SharpDXWrapper.Shape.Apply(SharpDX.Direct3D11.DeviceContext)">
            <summary>
            Applies the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:SharpDXWrapper.Shape.Draw(SharpDX.Direct3D11.DeviceContext)">
            <summary>
            Draws the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:SharpDXWrapper.Shape.SetVertices(SharpDXWrapper.DirectXVertex[])">
            <summary>
            Sets the vertices.
            </summary>
            <param name="vertices">The vertices.</param>
            <exception cref="T:System.ArgumentNullException">vertices</exception>
            <exception cref="T:System.ArgumentNullException">vertices</exception>
        </member>
        <member name="M:SharpDXWrapper.Shape.CalculateNormals(SharpDXWrapper.DirectXVertex[])">
            <summary>
            Calculates the normals.
            </summary>
            <param name="vertices">The vertices.</param>
            <remarks>Calculates the normal, provided that the number of vertices is a multiple of 3</remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SharpDXWrapper.Shape.CreateIndexedVertices(SharpDXWrapper.DirectXVertex[],System.UInt32[])">
            <summary>
            Creates the indexed vertices.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="indices">The indices.</param>
            <returns>DirectXVertex[].</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SharpDXWrapper.Shape.SaveToObjFile(SharpDXWrapper.DirectXVertex[],System.String)">
            <summary>
            Saves to object file.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="fileName">Name of the file.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:SharpDXWrapper.Shape.Vertices">
            <summary>
            Gets the vertices.
            </summary>
            <value>The vertices.</value>
        </member>
        <member name="P:SharpDXWrapper.Shape.VertexCount">
            <summary>
            Gets the vertex count.
            </summary>
            <value>The vertex count.</value>
        </member>
        <member name="T:SharpDXWrapper.IndexedShape">
            <summary>
            Class IndexedShape.
            </summary>
            <seealso cref="T:SharpDXWrapper.Shape"/>
        </member>
        <member name="F:SharpDXWrapper.IndexedShape.IndexBuffer">
            <summary>
            The index buffer
            </summary>
        </member>
        <member name="M:SharpDXWrapper.IndexedShape.#ctor(SharpDX.Direct3D11.Device,SharpDXWrapper.DirectXVertex[],System.UInt32[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDXWrapper.IndexedShape"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="vertices">The vertices.</param>
            <param name="indices">The indices.</param>
        </member>
        <member name="M:SharpDXWrapper.IndexedShape.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:SharpDXWrapper.IndexedShape.Apply(SharpDX.Direct3D11.DeviceContext)">
            <summary>
            Applies the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:SharpDXWrapper.IndexedShape.Draw(SharpDX.Direct3D11.DeviceContext)">
            <summary>
            Draws the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:SharpDXWrapper.IndexedShape.SetIndices(System.UInt32[])">
            <summary>
            Sets the indices.
            </summary>
            <param name="indices">The indices.</param>
            <exception cref="T:System.ArgumentNullException">indices</exception>
            <exception cref="T:System.ArgumentNullException">indices</exception>
        </member>
        <member name="P:SharpDXWrapper.IndexedShape.Indices">
            <summary>
            Gets the indices.
            </summary>
            <value>The indices.</value>
        </member>
        <member name="P:SharpDXWrapper.IndexedShape.IndicesCount">
            <summary>
            Gets the indices count.
            </summary>
            <value>The indices count.</value>
        </member>
        <member name="T:SharpDXWrapper.DeviceDescription">
            <summary>
            Specifies the required parameters with which the device will be created
            </summary>
        </member>
        <member name="F:SharpDXWrapper.DeviceDescription.MultiSampleCount">
            <summary>
            The multisample count.
            </summary>
        </member>
        <member name="F:SharpDXWrapper.DeviceDescription.MultiSampleQuality">
            <summary>
            The multisample quality. Usually this value is 0
            </summary>
        </member>
        <member name="F:SharpDXWrapper.DeviceDescription.Fullcreen">
            <summary>
            The fullcreen
            </summary>
        </member>
        <member name="F:SharpDXWrapper.DeviceDescription.SwapEffect">
            <summary>
            The swap effect
            </summary>
        </member>
        <member name="M:SharpDXWrapper.DeviceDescription.Default">
            <summary>
            Returns default values for SharpDXWrapper.DeviceDescription.
            </summary>
        </member>
        <member name="M:SharpDXWrapper.DeviceDescription.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="T:SharpDXWrapper.MultiSampleType">
            <summary>
            The number of multisamples per pixel.
            The default sampler mode, with no anti-aliasing, has a count of 1 and a quality level of 0.
            Hardware must support 1, 4, and 8 sample counts. Hardware vendors can expose more sample counts beyond these.
            However, if vendors support 2, 4(required), 8(required), or 16,
            they must also support the corresponding standard pattern or center pattern for each of those sample counts.
            https://msdn.microsoft.com/en-us/library/windows/desktop/bb173072(v=vs.85).aspx)
            </summary>
        </member>
        <member name="F:SharpDXWrapper.MultiSampleType.Unknown">
            <summary>
            Set this value if the device should automatically determine MultiSampleCount.
            </summary>
        </member>
        <member name="T:SharpDXWrapper.SharpDXDevice">
            <summary>
            Provides the ability to quickly create a Direct3D11Device
            </summary>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="F:SharpDXWrapper.SharpDXDevice.width">
            <summary>
            The width of back buffer
            </summary>
        </member>
        <member name="F:SharpDXWrapper.SharpDXDevice.height">
            <summary>
            The height of back buffer
            </summary>
        </member>
        <member name="F:SharpDXWrapper.SharpDXDevice.syncInterval">
            <summary>
            The synchronize interval
            </summary>
        </member>
        <member name="M:SharpDXWrapper.SharpDXDevice.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDXWrapper.SharpDXDevice"/> class.
            </summary>
            <param name="control">The control.</param>
            <exception cref="T:System.ArgumentNullException">control</exception>
        </member>
        <member name="M:SharpDXWrapper.SharpDXDevice.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:SharpDXWrapper.SharpDXDevice"/> class.
            </summary>
        </member>
        <member name="M:SharpDXWrapper.SharpDXDevice.Dispose">
            <summary>
            Performs application-defined tasks related to the release or reset of unmanaged resources.
            </summary>
        </member>
        <member name="M:SharpDXWrapper.SharpDXDevice.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:SharpDXWrapper.SharpDXDevice.CheckMultiSample">
            <summary>
            Check the multisample levels that are supported by the device.
            </summary>
            <returns>DXGI.SampleDescription[].</returns>
        </member>
        <member name="M:SharpDXWrapper.SharpDXDevice.Initialize(SharpDXWrapper.DeviceDescription)">
            <summary>
            Creates Direct3D11 Device, RenderTargetView, DepthStencilView, Viewport
            </summary>
            <returns><c>true</c> if Device initialized, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SharpDXWrapper.SharpDXDevice.Run">
            <summary>
            Runs the main loop for the specified control.
            </summary>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:SharpDXWrapper.SharpDXDevice.SetRasterizerState(SharpDX.Direct3D11.RasterizerStateDescription)">
            <summary>
            Sets the state of the rasterizer.
            </summary>
            <param name="desc">The desc.</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:SharpDXWrapper.SharpDXDevice.SetFillMode(SharpDX.Direct3D11.FillMode)">
            <summary>
            Sets the fill mode.
            </summary>
            <param name="fillMode">The fill mode.</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:SharpDXWrapper.SharpDXDevice.SetCullMode(SharpDX.Direct3D11.CullMode)">
            <summary>
            Sets the cull mode.
            </summary>
            <param name="cullMode">The cull mode.</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:SharpDXWrapper.SharpDXDevice.Resize(System.Int32,System.Int32)">
            <summary>
            Resizes the specified width.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:SharpDXWrapper.SharpDXDevice.BeginDraw">
            <summary>
            Prepares the device for drawing and invoke OnDraw event
            </summary>
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <member name="M:SharpDXWrapper.SharpDXDevice.Present">
            <summary>
            Presents this instance. SwapChain::Present()
            </summary>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:SharpDXWrapper.SharpDXDevice.CreateRenderTarget">
            <summary>
            Creates the render target.
            </summary>
            <returns>D3D11.RenderTargetView.</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:SharpDXWrapper.SharpDXDevice.CreateDepthStencil">
            <summary>
            Creates the depth stencil.
            </summary>
            <returns>D3D11.DepthStencilView.</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="E:SharpDXWrapper.SharpDXDevice.OnDraw">
            <summary>
            Occurs after preparing the device for rendering.
            </summary>
        </member>
        <member name="P:SharpDXWrapper.SharpDXDevice.Initialized">
            <summary>
            Gets a value indicating whether this <see cref="T:SharpDXWrapper.SharpDXDevice"/> is initialized.
            </summary>
            <value><c>true</c> if initialized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpDXWrapper.SharpDXDevice.RenderControl">
            <summary>
            Gets the control that is used for rendering.
            </summary>
            <value>The render control.</value>
        </member>
        <member name="P:SharpDXWrapper.SharpDXDevice.Device">
            <summary>
            Gets the D3D11Device.
            </summary>
            <value>The device.</value>
        </member>
        <member name="P:SharpDXWrapper.SharpDXDevice.Context">
            <summary>
            Gets the immediate context.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:SharpDXWrapper.SharpDXDevice.SwapChain">
            <summary>
            Gets the swap chain.
            </summary>
            <value>The swap chain.</value>
        </member>
        <member name="P:SharpDXWrapper.SharpDXDevice.BackgroundColor">
            <summary>
            Gets or sets the background color of backbuffer.
            </summary>
            <value>The color of the background.</value>
        </member>
        <member name="P:SharpDXWrapper.SharpDXDevice.SyncInterval">
            <summary>
            Gets or sets the synchronize interval.
            </summary>
            <value>The synchronize interval.</value>
        </member>
        <member name="P:SharpDXWrapper.SharpDXDevice.Width">
            <summary>
            Gets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:SharpDXWrapper.SharpDXDevice.Height">
            <summary>
            Gets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:SharpDXWrapper.SharpDXDevice.Description">
            <summary>
            Gets description of the created device
            </summary>
            <value>The description.</value>
        </member>
    </members>
</doc>
